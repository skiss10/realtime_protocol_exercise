0.1 ) Have testingclientand server send message objects instread of the bytes you're sending now.
0.2) Create a man in the middle proxy that forwards messages between the client <> Server
0.3) Create a message routing logic on proxy.py that is a message name of a specific type is received, it triggers a disconnection. 






1) Figure out how to simulate disconnection on client side by closing conn randomly.

0.5)  Implement these properties for the connection object: https://ably.com/docs/api/realtime-sdk/connection?lang=nodejs
Implement methods to run upon initialization of Connection object (Setting raddr, etc.)
Implement greeting response from server to client with connection_id, perhaps set this equal to the thread ID

- Create a prompt for user input when running client.py asking if the user wants to simulate a disconnection. If yes, then for how long (in seconds)
- Update client.py server_handler or message_handler to have logic that if discconect simulation is True, disconnect for that time (this will be just socket.disconnect, time.sleep. socket.reconnect) async somewhere here..
- Update client.py to format a reconnection type message and logic to send 
- Update server.py to handling incoming reconnection type requets (rejecting any older than 120 seconds)
-

1.2) Add seialization and deserialization to message object?

2) Add a way for server.py to gracefully handle client disconnects and stop heartbeats / thread gracefully

6) Add a variable to constants.py to simulate various connection types (SSE vs. Socket. vs. gRPC)


7) Refactor client.py message_handler with a handler dictionary mapping:

def message_handler(msg):
    handlers = {
        "hello": handle_hello,
        "goodbye": handle_goodbye,
        "ping": handle_ping,
        # add more message types and their handlers here
    }
    handler = handlers.get(msg["type"], handle_unknown)
    return handler(msg)

def handle_hello(msg):
    # handle the "hello" message type
    pass

def handle_goodbye(msg):
    # handle the "goodbye" message type
    pass

def handle_ping(msg):
    # handle the "ping" message type
    pass

def handle_unknown(msg):
    # handle any unknown message types
    pass