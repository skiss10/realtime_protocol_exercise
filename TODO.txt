TODO:

- Create contorl plane between proxy and servers

- updated reconnection_attempt_message_handler to look at redis keys for reconnection attempts that aren't in local memory

- add somethign to readme about installing redis

- Update reconnection handler to point to the right connection object "former connections (in storage) vs connection set up for reconnection" End that new connection, update last heartbeat for hte former connection, etc. etc..


TODO Future:

- Expand on testing. Look into using magic mock or decoupling functions in server.py and client.py from the connection object input paramter

- Update proxy.py and server.py to gracefully handle server failures so that I can eventually implement load balancer for incoming requests (behind proxy) that load balances incoming requests with hash ring

- implement redis session store with multiple servers (use multiprocessing with servers)

- Add a variable to constants.py to choose from one of various connection types (SSE vs. raw socket. vs. gRPC)

- Add redis layer to load_balancers too ?

